Evaluation time and accuracy
beginning_test_acc: 67.54
time_arr_all:     13.987088918685913
time_arr_one_avr: 0.0013987088918685914
----------------------------------------
----------------------------------------
C7
time_encoding_min:  1.9818313121795654
time_decoding_min:  1.9770989418029785
--
time_encoding_max:  1.9818313121795654
time_decoding_max:  1.9770989418029785
--
time_encoding_mean: 1.9818313121795654
time_decoding_mean: 1.9770989418029785
####
cpu_encoding_min: 5183147848
cpu_decoding_min: 5125118854
--
cpu_encoding_max: 5183147848
cpu_decoding_max: 5125118854
--
cpu_encoding_mean: 5183147848.0
cpu_decoding_mean: 5125118854.0
----------------------------------------
C8
time_encoding_min:  1.994187831878662
time_decoding_min:  1.9760181903839111
--
time_encoding_max:  1.994187831878662
time_decoding_max:  1.9760181903839111
--
time_encoding_mean: 1.994187831878662
time_decoding_mean: 1.9760181903839111
####
cpu_encoding_min: 5144910254
cpu_decoding_min: 5123710966
--
cpu_encoding_max: 5144910254
cpu_decoding_max: 5123710966
--
cpu_encoding_mean: 5144910254.0
cpu_decoding_mean: 5123710966.0
----------------------------------------
C9
time_encoding_min:  1.995572805404663
time_decoding_min:  2.3611159324645996
--
time_encoding_max:  1.995572805404663
time_decoding_max:  2.3611159324645996
--
time_encoding_mean: 1.995572805404663
time_decoding_mean: 2.3611159324645996
####
cpu_encoding_min: 5144309266
cpu_decoding_min: 6029566736
--
cpu_encoding_max: 5144309266
cpu_decoding_max: 6029566736
--
cpu_encoding_mean: 5144309266.0
cpu_decoding_mean: 6029566736.0
----------------------------------------
DataParallel(
  (module): VGG(
    (features): Sequential(
      (0): quan_Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): quan_Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU(inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): quan_Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): ReLU(inplace=True)
      (11): quan_Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): ReLU(inplace=True)
      (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (15): quan_Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace=True)
      (18): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (20): ReLU(inplace=True)
      (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (22): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (23): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (24): ReLU(inplace=True)
      (25): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (26): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (27): ReLU(inplace=True)
      (28): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (classifier): Sequential(
      (0): quan_Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU(inplace=True)
      (2): Dropout(p=0.5, inplace=False)
      (3): quan_Linear(in_features=4096, out_features=4096, bias=True)
      (4): ReLU(inplace=True)
      (5): Dropout(p=0.5, inplace=False)
    )
    (linear): quan_Linear(in_features=4096, out_features=100, bias=True)
  )
)