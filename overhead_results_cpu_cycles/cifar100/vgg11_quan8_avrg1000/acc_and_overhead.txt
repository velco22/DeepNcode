Evaluation time and accuracy
beginning_test_acc: 68.8
time_arr_all:     0.3827805519104004
time_arr_one_avr: 3.827805519104004e-05
----------------------------------------
----------------------------------------
C12
time_encoding_min:  1.9878246784210205
time_decoding_min:  2.324256181716919
--
time_encoding_max:  2.372385025024414
time_decoding_max:  2.9194931983947754
--
time_encoding_mean: 2.0010629239082336
time_decoding_mean: 2.3429299654960634
####
cpu_encoding_min: 5115340388
cpu_decoding_min: 6054743288
--
cpu_encoding_max: 6218410352
cpu_decoding_max: 6490311858
--
cpu_encoding_mean: 5150334150.342
cpu_decoding_mean: 6105471573.302
----------------------------------------
C13
time_encoding_min:  1.9999639987945557
time_decoding_min:  2.3428733348846436
--
time_encoding_max:  2.0328140258789062
time_decoding_max:  2.3952722549438477
--
time_encoding_mean: 2.012915034532547
time_decoding_mean: 2.361267960071564
####
cpu_encoding_min: 5148644164
cpu_decoding_min: 6105139016
--
cpu_encoding_max: 5239288958
cpu_decoding_max: 6386811264
--
cpu_encoding_mean: 5181038595.608
cpu_decoding_mean: 6157458780.392
----------------------------------------
C14
time_encoding_min:  1.998868703842163
time_decoding_min:  2.3395814895629883
--
time_encoding_max:  2.2953147888183594
time_decoding_max:  2.451106548309326
--
time_encoding_mean: 2.0045796794891357
time_decoding_mean: 2.3473443887233736
####
cpu_encoding_min: 5145089680
cpu_decoding_min: 6100082888
--
cpu_encoding_max: 5628118236
cpu_decoding_max: 6531486410
--
cpu_encoding_mean: 5158823760.966
cpu_decoding_mean: 6121273952.908
----------------------------------------
DataParallel(
  (module): VGG(
    (features): Sequential(
      (0): quan_Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): quan_Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU(inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): quan_Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): ReLU(inplace=True)
      (11): quan_Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): ReLU(inplace=True)
      (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (15): quan_Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace=True)
      (18): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (20): ReLU(inplace=True)
      (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (22): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (23): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (24): ReLU(inplace=True)
      (25): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (26): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (27): ReLU(inplace=True)
      (28): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (classifier): Sequential(
      (0): quan_Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU(inplace=True)
      (2): Dropout(p=0.5, inplace=False)
      (3): quan_Linear(in_features=4096, out_features=4096, bias=True)
      (4): ReLU(inplace=True)
      (5): Dropout(p=0.5, inplace=False)
    )
    (linear): quan_Linear(in_features=4096, out_features=100, bias=True)
  )
)