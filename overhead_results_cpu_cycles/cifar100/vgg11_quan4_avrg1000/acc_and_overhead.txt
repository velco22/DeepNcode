Evaluation time and accuracy
beginning_test_acc: 67.53
time_arr_all:     0.7565462589263916
time_arr_one_avr: 7.565462589263915e-05
----------------------------------------
----------------------------------------
C7
time_encoding_min:  2.0258824825286865
time_decoding_min:  1.9995386600494385
--
time_encoding_max:  2.276146650314331
time_decoding_max:  2.204038619995117
--
time_encoding_mean: 2.0418081765174865
time_decoding_mean: 2.01808198261261
####
cpu_encoding_min: 5209756032
cpu_decoding_min: 5222659354
--
cpu_encoding_max: 5678368864
cpu_decoding_max: 6050122164
--
cpu_encoding_mean: 5250232408.36
cpu_decoding_mean: 5317119065.172
----------------------------------------
C8
time_encoding_min:  2.0252883434295654
time_decoding_min:  2.0023579597473145
--
time_encoding_max:  2.1440882682800293
time_decoding_max:  2.1356277465820312
--
time_encoding_mean: 2.037442897081375
time_decoding_mean: 2.017227626800537
####
cpu_encoding_min: 5209243912
cpu_decoding_min: 5231379670
--
cpu_encoding_max: 5533199760
cpu_decoding_max: 5858091276
--
cpu_encoding_mean: 5241793150.248
cpu_decoding_mean: 5308314773.044
----------------------------------------
C9
time_encoding_min:  2.0274038314819336
time_decoding_min:  2.349012613296509
--
time_encoding_max:  2.129387378692627
time_decoding_max:  2.46600079536438
--
time_encoding_mean: 2.039709857702255
time_decoding_mean: 2.36224551653862
####
cpu_encoding_min: 5215063516
cpu_decoding_min: 6129439010
--
cpu_encoding_max: 5587990472
cpu_decoding_max: 6709128894
--
cpu_encoding_mean: 5254562278.014
cpu_decoding_mean: 6186700918.756
----------------------------------------
DataParallel(
  (module): VGG(
    (features): Sequential(
      (0): quan_Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): quan_Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU(inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): quan_Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): ReLU(inplace=True)
      (11): quan_Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): ReLU(inplace=True)
      (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (15): quan_Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace=True)
      (18): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (20): ReLU(inplace=True)
      (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (22): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (23): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (24): ReLU(inplace=True)
      (25): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (26): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (27): ReLU(inplace=True)
      (28): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (classifier): Sequential(
      (0): quan_Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU(inplace=True)
      (2): Dropout(p=0.5, inplace=False)
      (3): quan_Linear(in_features=4096, out_features=4096, bias=True)
      (4): ReLU(inplace=True)
      (5): Dropout(p=0.5, inplace=False)
    )
    (linear): quan_Linear(in_features=4096, out_features=100, bias=True)
  )
)