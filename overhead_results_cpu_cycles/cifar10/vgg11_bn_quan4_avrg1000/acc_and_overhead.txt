Evaluation time and accuracy
beginning_test_acc: 91.26
time_arr_all:     0.37069272994995117
time_arr_one_avr: 3.706927299499512e-05
----------------------------------------
----------------------------------------
C7
time_encoding_min:  0.6650662422180176
time_decoding_min:  0.6480746269226074
--
time_encoding_max:  0.6841514110565186
time_decoding_max:  0.6643667221069336
--
time_encoding_mean: 0.6689529628753662
time_decoding_mean: 0.6520548145771027
####
cpu_encoding_min: 1690024026
cpu_decoding_min: 1683017718
--
cpu_encoding_max: 1740938172
cpu_decoding_max: 1741828664
--
cpu_encoding_mean: 1706364752.23
cpu_decoding_mean: 1695089219.92
----------------------------------------
C8
time_encoding_min:  0.6670370101928711
time_decoding_min:  0.6493139266967773
--
time_encoding_max:  0.6788351535797119
time_decoding_max:  0.6628608703613281
--
time_encoding_mean: 0.6695695314407348
time_decoding_mean: 0.6522323017120362
####
cpu_encoding_min: 1696428598
cpu_decoding_min: 1684937530
--
cpu_encoding_max: 1730915888
cpu_decoding_max: 1725867744
--
cpu_encoding_mean: 1707518727.518
cpu_decoding_mean: 1694777397.118
----------------------------------------
C9
time_encoding_min:  0.667320728302002
time_decoding_min:  0.7694680690765381
--
time_encoding_max:  0.6902883052825928
time_decoding_max:  0.798823356628418
--
time_encoding_mean: 0.6701708543300628
time_decoding_mean: 0.7734400713443756
####
cpu_encoding_min: 1695216914
cpu_decoding_min: 2001727596
--
cpu_encoding_max: 1758861260
cpu_decoding_max: 2104618256
--
cpu_encoding_mean: 1708530502.024
cpu_decoding_mean: 2010742097.468
----------------------------------------
DataParallel(
  (module): VGG_cifar10(
    (features): Sequential(
      (0): quan_Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): quan_Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU(inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): quan_Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): ReLU(inplace=True)
      (11): quan_Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): ReLU(inplace=True)
      (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (15): quan_Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace=True)
      (18): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (20): ReLU(inplace=True)
      (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (22): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (23): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (24): ReLU(inplace=True)
      (25): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (26): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (27): ReLU(inplace=True)
      (28): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (classifier): Sequential(
      (0): Dropout(p=0.5, inplace=False)
      (1): quan_Linear(in_features=512, out_features=512, bias=True)
      (2): ReLU(inplace=True)
      (3): Dropout(p=0.5, inplace=False)
      (4): quan_Linear(in_features=512, out_features=512, bias=True)
      (5): ReLU(inplace=True)
    )
    (linear): quan_Linear(in_features=512, out_features=10, bias=True)
  )
)