Evaluation time and accuracy
beginning_test_acc: 91.69
time_arr_all:     11.243582010269165
time_arr_one_avr: 0.0011243582010269165
----------------------------------------
----------------------------------------
C12
time_encoding_min:  0.652592658996582
time_decoding_min:  0.7768154144287109
--
time_encoding_max:  0.652592658996582
time_decoding_max:  0.7768154144287109
--
time_encoding_mean: 0.652592658996582
time_decoding_mean: 0.7768154144287109
####
cpu_encoding_min: 1675726516
cpu_decoding_min: 2012219330
--
cpu_encoding_max: 1675726516
cpu_decoding_max: 2012219330
--
cpu_encoding_mean: 1675726516.0
cpu_decoding_mean: 2012219330.0
----------------------------------------
C13
time_encoding_min:  0.6575517654418945
time_decoding_min:  0.7735047340393066
--
time_encoding_max:  0.6575517654418945
time_decoding_max:  0.7735047340393066
--
time_encoding_mean: 0.6575517654418945
time_decoding_mean: 0.7735047340393066
####
cpu_encoding_min: 1673470030
cpu_decoding_min: 2013111234
--
cpu_encoding_max: 1673470030
cpu_decoding_max: 2013111234
--
cpu_encoding_mean: 1673470030.0
cpu_decoding_mean: 2013111234.0
----------------------------------------
C14
time_encoding_min:  0.659071683883667
time_decoding_min:  0.7718405723571777
--
time_encoding_max:  0.659071683883667
time_decoding_max:  0.7718405723571777
--
time_encoding_mean: 0.659071683883667
time_decoding_mean: 0.7718405723571777
####
cpu_encoding_min: 1671583364
cpu_decoding_min: 2011129706
--
cpu_encoding_max: 1671583364
cpu_decoding_max: 2011129706
--
cpu_encoding_mean: 1671583364.0
cpu_decoding_mean: 2011129706.0
----------------------------------------
DataParallel(
  (module): VGG_cifar10(
    (features): Sequential(
      (0): quan_Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): quan_Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU(inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): quan_Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): ReLU(inplace=True)
      (11): quan_Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): ReLU(inplace=True)
      (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (15): quan_Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace=True)
      (18): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (20): ReLU(inplace=True)
      (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (22): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (23): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (24): ReLU(inplace=True)
      (25): quan_Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (26): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (27): ReLU(inplace=True)
      (28): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (classifier): Sequential(
      (0): Dropout(p=0.5, inplace=False)
      (1): quan_Linear(in_features=512, out_features=512, bias=True)
      (2): ReLU(inplace=True)
      (3): Dropout(p=0.5, inplace=False)
      (4): quan_Linear(in_features=512, out_features=512, bias=True)
      (5): ReLU(inplace=True)
    )
    (linear): quan_Linear(in_features=512, out_features=10, bias=True)
  )
)